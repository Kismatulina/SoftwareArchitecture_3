package ru.geekbrains.lesson3;

import java.awt.*;
//import ru.geekbrains.lesson3.ocp.CarWash;

public class Program {

    /**
     * 1. Спроектировать абстрактный класс «Car» у которого должны
     * быть свойства: марка, модель, цвет, тип кузова, число колёс, тип
     * топлива, тип коробки передач, объём двигателя; методы:
     * движение, обслуживание, переключение передач, включение
     * фар, включение дворников. подпункты:1е-создали файлы enum(перечисление) тип кузова,тип топлива, тип коробки передач
     * 2е-абстрактный класс «Car» и методы
     * <p>
     * 2. Создать конкретный автомобиль путём наследования класса
     * «Car». создали Harvester уборщик в файле Harvester.java
     * <p>
     * 3. Расширить абстрактный класс «Car», добавить метод: подметать улицу.(в базовый Car не ставим, а в конкретную машину уборщик, вот наш solid
     * Создать конкретный автомобиль путём наследования
     * класса «Car». Провести проверку принципа SRP(Принцип Единственной Ответственности).
     * <p>
     * 4. Расширить абстрактный класс «Car», добавить метод:
     * включение противотуманных фар, перевозка груза. Провести
     * проверку принципа OCP.(Open/Closed Principle, принцип открытости/закрытости) необходимо убедиться,
     * что программный модуль (класс, функция, метод и т.п.) может быть расширен без внесения изменений в его исходный код.
     * Наши сущности приложения (классы, модули, методы)открыты для расширения и закрыты для модификации
     * <p>
     * 5. Создать конкретный автомобиль путём наследования класса
     * «Car», определить число колёс = 3. Провести проверку принципа LSP.(Liskov Substitution Principle.Принцип подстановки Барбары Лисков)
     * <p>
     * <p>
     * 6. Создать конкретный автомобиль путём наследования класса
     * «Car», определить метод «движение» - «полёт». Провести
     * проверку принципа LSP. в файле FlyCar.java
     * <p>
     * 7. Создать интерфейс «Заправочная станция», создать метод:
     * заправка топливом. в файле Refueling.java
     * <p>
     * <p>
     * 8. Имплементировать метод интерфейса «Заправочная станция» в
     * конкретный класс «Car».
     * <p>
     * 9. Добавить в интерфейс «Заправочная станция» методы: протирка
     * лобового стекла, протирка фар, протирка зеркал. добавил в файле Refueling.java и Harvester.java
     * <p>
     * 10. Имплементировать все методы интерфейса «Заправочная
     * станция» в конкретный класс «Car». Провести проверку
     * принципа ISP. Создать дополнительный/е интерфейсы и
     * имплементировать их в конкретный класс «Car». Провести
     * проверку принципа ISP(Принцип разделения интерфейса). в файле Wiping.java и Harvester.java
     * <p>
     * 11. Создать путём наследования класса «Car» два
     * автомобиля: с бензиновым и дизельным двигателями,
     * имплементировать метод «Заправка топливом» интерфейса
     * «Заправочная станция». Реализовать заправку каждого
     * автомобиля подходящим топливом. Провести проверку принципа DIP(Принцип инверсии зависимости). в файле RefuelingStation.java
     *
     * @param args
     */
    /**
    public static void main(String[] args) {

        Harvester harvester = new Harvester("A", "B", Color.BLACK);

        RefuelingStation refuelingStation = new RefuelingStation();//запр станция

        harvester.setRefuelingStation(refuelingStation);//автомоб заехал на заправ станцию

        harvester.fuel();// заправляю автомобиль

    }

    // 5.задача. хотим посчитать стоимость работы, например
    public static double calculateMaintenance(Car car) {
        if (car.getWheelsCount() == 6) {
            return 1500 * 6; // это грузовой и по 1,5т рублей
        } else {
            return 1000 * 4;//если 4, то автомобиль и тогда по 1 т.р и если 3 колеса, то все равно сюда по 1 т.р, это нарушение принципа Б.Л
        }
    }
*/
    public static void main(String[] args) {
        CarWash carWash = new CarWash("A", "B", Color.BLACK);

        // Создаем автомобили разных типов
        Harvester harvester = new Harvester("John Deere", "S550", Color.GREEN);
              harvester.setFuelType(FuelType.Diesel);

    //    SportCar sportCar = new SportCar("Ferrari", "488 GTB", Color.RED);
      //        sportCar.setFuelType(FuelType.Gasoline);

        // Заправляем и моем автомобили
        RefuelingStation refuelingStation = new RefuelingStation();
              refuelingStation.fuel(harvester.getFuelType());
              carWash.wash(harvester);

     //   RefuelingStationV2 refuelingStationV2 = new RefuelingStationV2();
     //         refuelingStationV2.fuel(sportCar.getFuelType());
     //         carWash.wash(sportCar);
    }
}

